/******************************************************
* PLEASE DO NOT EDIT THIS FILE
* the verification process may break
* ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var port = process.env.PORT || 3000;
var highscore = require('./views/high-data.js');


if (!process.env.DISABLE_XORIGIN) {
 app.use(function(req, res, next) {
   var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
   var origin = req.headers.origin || '*';
   if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
        console.log(origin);
        res.setHeader('Access-Control-Allow-Origin', origin);
        res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
   }
   next();
 });
}

app.use('/public', express.static(process.cwd() + '/public'));



app.route('/')
   .get(function(req, res) {
     res.sendFile(process.cwd() + '/views/index.html');
   })

app.route('/highscore').get(function(req,res){
       res.sendFile(process.cwd() + '/views/highscore.html');
});

app.route('/rules').get(function(req,res){
  res.sendFile(process.cwd() + '/views/rules.html');
});

app.route('/game').get(function(req,res){
  res.sendFile(process.cwd() + '/views/game.html');
});

app.get('/highscore-data',function(req,res){
    var object = {status:null,"pie_data":null,"player_data":null};
    let i=0;
  highscore.findHighData().then(function(data){
      send_data("pie_data",data);
    
  },function(err){
    console.log("error in pie data");
        res.send({status:'error'});
    });
  
  highscore.findNameData().then(function(data){
        send_data("player_data",data);
  },function(err){
        console.log(err);
        res.send({status:'error'});
  });

  function send_data(key,value){
    i++;
    if (i===1){
      object[key] = value;
    } else if (i===2){
      object[key] = value;
      i=0;
      object.status ='sucess';
      res.send(object);
    }
  }

});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
 res.status(404);
 res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
 if(err) {
   res.status(err.status || 500)
     .type('txt')
     .send(err.message || 'SERVER ERROR');
 }
})

app.listen(port, function () {
 console.log('serverlistening at' + port);
});
